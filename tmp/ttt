
        def sqrt(self):
            # https://www.rieselprime.de/ziki/Modular_square_root
            if self.value == 0:
                return [_M(0)]
            m = self.p
            a = _M(self.value)
            x = a ** (m - 1 >> 1) % m
            if x != 1:
                return []
            if m % 4 == 3:
                c = a ** (m + 1 >> 2)
            elif m % 8 == 5:
                v = (2 * a) ** (m - 5 >> 3) % m
                i = 2 * a * v * v % m
                c = a * v * (i - 1)
            elif m % 8 == 1:
                # step 1:
                e = 0
                q = m - 1
                while (q & 1) == 0:
                    e += 1
                    q >>= 1
                # step 2:
                for x in range(2, m):
                    z = (x ** q) % m
                    t = z ** (1 << e - 1) % m
                    if t != 1:
                        break
                # step 3:
                y = z
                r = e
                x = a ** (q - 1 >> 1) % m
                v = (a * x) % m
                w = (v * x) % m
                # step 4:
                while w != 1:
                    # step 5:
                    k = 0
                    while w ** (1<<k) % m != 1:
                        k += 1
                    # step 6:
                    d = y ** (1 << r - k - 1) % m
                    y = (d * d) % m
                    r = k
                    v = (d * v) % m
                    w = (w * y) % m
                c = v
            return [c % m, (-c) % m]
