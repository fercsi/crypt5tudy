#!/usr/bin/python3

import pytest
from util.asn1 import Asn1

# DON'T FORGET: other classes, construction, encapsulation, unique methods(e.g. getitem...)
@pytest.mark.parametrize('ber,annotation,printout', (
    # ==== EOC, TYPE 0 ====
    (   '00 00',
        None,
        '[EOC]: ~'   ),
    (   '00 00',
        ('Name',),
        'Name[EOC]: ~'   ),
    # ==== BOOLEAN, TYPE 1 ====
    (   '01 01 00',
        None,
        '[BOOLEAN]: false'   ),
    (   '01 01 ff',
        ('Name',),
        'Name[BOOLEAN]: true'   ),
    # ==== INTEGER, TYPE 2 ====
    # NOTE: common data representation is tested only here
    (   '02 01 00',
        None,
        '[INTEGER]: 0'   ),
    (   '02 02 01 02',
        ('Name',),
        'Name[INTEGER]: 258'   ),
    (   '02 81 81 01' + '00' * 128,
        (None, 'dec'),
        '[INTEGER]: ' + str(1<<1024)   ),
    (   '02 82 0101 01' + '00' * 256,
        None,
        '[INTEGER]: ' + str(1<<2048)   ),
    (   '02 04 cafebeaf',
        (None, 'hex'),
        '[INTEGER]: cafebeaf'   ),
    (   '02 04 cafebeaf',
        (None, 'bin'),
        '[INTEGER]: 11001010111111101011111010101111'   ),
    (   '02 01 00',
        (None, 'hex_block'),
        '[INTEGER]:\n  00'   ),
    (   '02 10' + 'b6' * 16,
        (None, 'hex_block'),
        '[INTEGER]:\n ' + ' b6' * 16   ),
    (   '02 11' + 'b6' * 17,
        (None, 'hex_block'),
        '[INTEGER]:\n ' + ' b6' * 16 + '\n  b6'   ),
    (   '02 01 00',
        (None, 'bin_block'),
        '[INTEGER]:\n  00000000'   ),
    (   '02 04' + 'b6' * 4,
        (None, 'bin_block'),
        '[INTEGER]:\n ' + ' 10110110' * 4   ),
    (   '02 05' + 'b6' * 5,
        (None, 'bin_block'),
        '[INTEGER]:\n ' + ' 10110110' * 4 + '\n  10110110'   ),
    # ==== BIT STRING, TYPE 3 ====
    # NOTE: data representetion 'dec' is tested here
    (   '03 01 00',
        None,
        '[BIT STRING]: ~'   ),
    (   '03 02 07 80', # data formatting is tested detailef with INTEGER
        ('Name',),
        ( 'Name[BIT STRING]:',
          '  80' )   ),
    (   '03 03 00 0102',
        ('Name','dec'),
        'Name[BIT STRING]: 258'   ),
    (   '03 02 00 80',
        (None,'bin'),
        '[BIT STRING]: 10000000'   ),
    (   '03 02 01 80',
        (None,'bin'),
        '[BIT STRING]: 1000000-'   ),
    (   '03 02 07 80',
        (None,'bin'),
        '[BIT STRING]: 1-------'   ),
    (   '03 02 05 80',
        (None,'bin_block'),
        ( '[BIT STRING]:',
          '  100-----' )   ),
    (   '03 05 05' + 'b6' * 4,
        (None,'bin_block'),
        ( '[BIT STRING]:',
          '  10110110 10110110 10110110 101-----' )   ),
    (   '03 06 05' + 'b6' * 5,
        (None,'bin_block'),
        ( '[BIT STRING]:',
          '  10110110 10110110 10110110 10110110',
          '  101-----' )   ),
    (   '23 00',
        None,
        '*[BIT STRING]: ~'   ),
    (   '23 0e 03 01 00 03 02 04 50 03 05 00 cafe beef',
        (None, [(None,), (None, 'bin')]),
        ( '*[BIT STRING]:',
          '  [BIT STRING]: ~',
          '  [BIT STRING]: 0101----',
          '  [BIT STRING]:',
          '    ca fe be ef' )   ),
    # ==== OCTET STRING, TYPE 4 ====
    (   '04 00',
        None,
        '[OCTET STRING]: ~'   ),
    (   '04 01 b6',
        ('Name',),
        ( 'Name[OCTET STRING]:',
          '  b6' )   ),
    (   '24 00',
        None,
        '*[OCTET STRING]: ~'   ),
    (   '24 0d 04 00 04 02 04 50 04 05 00 cafe beef',
        (None, [(None,), (None, 'hex')]),
        ( '*[OCTET STRING]:',
          '  [OCTET STRING]: ~',
          '  [OCTET STRING]: 0450',
          '  [OCTET STRING]:',
          '    00 ca fe be ef' )   ),
    # ==== NULL, TYPE 5 ====
    (   '05 00',
        None,
        '[NULL]: ~'   ),
    (   '05 00',
        ('Name',),
        'Name[NULL]: ~'   ),
    # ==== OBJECT IDENTIFIER, TYPE 6 ====
    # NOTE: First level OID cannot be used, since 0.0, 1.0... is in use
    (   '06 01 00',
        None,
        '[OBJECT IDENTIFIER]: 0.0'   ),
    (   '06 01 2a',
        None,
        '[OBJECT IDENTIFIER]: 1.2'   ),
    (   '06 03 2a 86 48',
        None,
        '[OBJECT IDENTIFIER]: 1.2.840'   ),
    (   '06 06 2a 86 48 86 f7 0d',
        None,
        '[OBJECT IDENTIFIER]: 1.2.840.113549 (rsadsi)'   ),
    (   '06 09 2a 86 48 86 f7 0d 01 01 01',
        None,
        '[OBJECT IDENTIFIER]: 1.2.840.113549.1.1.1 (rsaEncryption)'   ),
))
def test_deserialize(ber, annotation, printout):
    ber_raw = bytes.fromhex(ber)
    asn1_object, length = Asn1._from_ber(ber_raw, 0)
    if annotation:
        asn1_object.annotate(*annotation)
    if isinstance(printout, tuple):
        printout = '\n'.join(printout)
    assert str(asn1_object) == printout
    # check if deserialization used exactly the amount of bytes as expected:
    assert len(ber_raw) == length
